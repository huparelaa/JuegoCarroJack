class Player{//(0,0) superior izquierdo
    field int x; //position x
    field int y; //position y

    constructor Player new(int Ax, int Ay){
        let x = Ax;
        let y = Ay;
        do draw();
        return this;
    }
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
    
    method void draw() {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 8176);
	do Memory.poke(memAddress +32, 4127);
	do Memory.poke(memAddress +64, 4113);
	do Memory.poke(memAddress +96, 8177);
	do Memory.poke(memAddress +128, -8175);
	do Memory.poke(memAddress +160, 4113);
	do Memory.poke(memAddress +192, 4081);
	do Memory.poke(memAddress +224, 17);
	do Memory.poke(memAddress +256, 30737);
	do Memory.poke(memAddress +288, 18193);
	do Memory.poke(memAddress +320, 16593);
	do Memory.poke(memAddress +352, 18193);
	do Memory.poke(memAddress +384, 30737);
	do Memory.poke(memAddress +416, 17);
	do Memory.poke(memAddress +448, 4081);
	do Memory.poke(memAddress +480, 4113);
	do Memory.poke(memAddress +512, -8175);
	do Memory.poke(memAddress +544, 8177);
	do Memory.poke(memAddress +576, 4113);
	do Memory.poke(memAddress +608, 4127);
	do Memory.poke(memAddress +640, 8176);
	// column 1
	do Memory.poke(memAddress +1, 32736);
	do Memory.poke(memAddress +33, 16416);
	do Memory.poke(memAddress +65, 16416);
	do Memory.poke(memAddress +97, 31200);
	do Memory.poke(memAddress +129, 2367);
	do Memory.poke(memAddress +161, 2496);
	do Memory.poke(memAddress +193, 3584);
	do Memory.poke(memAddress +225, 28672);
	do Memory.poke(memAddress +257, -32641);
	do Memory.poke(memAddress +289, 129);
	do Memory.poke(memAddress +321, 129);
	do Memory.poke(memAddress +353, 129);
	do Memory.poke(memAddress +385, -32641);
	do Memory.poke(memAddress +417, 28672);
	do Memory.poke(memAddress +449, 3584);
	do Memory.poke(memAddress +481, 2496);
	do Memory.poke(memAddress +513, 2367);
	do Memory.poke(memAddress +545, 31200);
	do Memory.poke(memAddress +577, 16416);
	do Memory.poke(memAddress +609, 16416);
	do Memory.poke(memAddress +641, 32736);
	// column 2
	do Memory.poke(memAddress +66, 15);
	do Memory.poke(memAddress +98, 17);
	do Memory.poke(memAddress +130, 17);
	do Memory.poke(memAddress +162, 17);
	do Memory.poke(memAddress +194, 17);
	do Memory.poke(memAddress +226, 17);
	do Memory.poke(memAddress +258, 23);
	do Memory.poke(memAddress +290, 20);
	do Memory.poke(memAddress +322, 20);
	do Memory.poke(memAddress +354, 20);
	do Memory.poke(memAddress +386, 23);
	do Memory.poke(memAddress +418, 17);
	do Memory.poke(memAddress +450, 17);
	do Memory.poke(memAddress +482, 17);
	do Memory.poke(memAddress +514, 17);
	do Memory.poke(memAddress +546, 17);
	do Memory.poke(memAddress +578, 15);
	return;
}

    method void erase() {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 0);
	do Memory.poke(memAddress +32, 4127, 0);
	do Memory.poke(memAddress +64, 4113, 0);
	do Memory.poke(memAddress +96, 8177, 0);
	do Memory.poke(memAddress +128, -8175, 0);
	do Memory.poke(memAddress +160, 4113, 0);
	do Memory.poke(memAddress +192, 4081, 0);
	do Memory.poke(memAddress +224, 17, 0);
	do Memory.poke(memAddress +256, 30737, 0);
	do Memory.poke(memAddress +288, 18193, 0);
	do Memory.poke(memAddress +320, 16593, 0);
	do Memory.poke(memAddress +352, 18193, 0);
	do Memory.poke(memAddress +384, 30737, 0);
	do Memory.poke(memAddress +416, 17, 0);
	do Memory.poke(memAddress +448, 4081, 0);
	do Memory.poke(memAddress +480, 4113, 0);
	do Memory.poke(memAddress +512, -8175, 0);
	do Memory.poke(memAddress +544, 8177, 0);
	do Memory.poke(memAddress +576, 4113, 0);
	do Memory.poke(memAddress +608, 4127, 0);
	do Memory.poke(memAddress +640, 8176, 0);
	// column 1
	do Memory.poke(memAddress +1, 32736, 0);
	do Memory.poke(memAddress +33, 16416, 0);
	do Memory.poke(memAddress +65, 16416, 0);
	do Memory.poke(memAddress +97, 31200, 0);
	do Memory.poke(memAddress +129, 2367, 0);
	do Memory.poke(memAddress +161, 2496, 0);
	do Memory.poke(memAddress +193, 3584, 0);
	do Memory.poke(memAddress +225, 28672, 0);
	do Memory.poke(memAddress +257, -32641, 0);
	do Memory.poke(memAddress +289, 129, 0);
	do Memory.poke(memAddress +321, 129, 0);
	do Memory.poke(memAddress +353, 129, 0);
	do Memory.poke(memAddress +385, -32641, 0);
	do Memory.poke(memAddress +417, 28672, 0);
	do Memory.poke(memAddress +449, 3584, 0);
	do Memory.poke(memAddress +481, 2496, 0);
	do Memory.poke(memAddress +513, 2367, 0);
	do Memory.poke(memAddress +545, 31200, 0);
	do Memory.poke(memAddress +577, 16416, 0);
	do Memory.poke(memAddress +609, 16416, 0);
	do Memory.poke(memAddress +641, 32736, 0);
	// column 2
	do Memory.poke(memAddress +66, 15, 0);
	do Memory.poke(memAddress +98, 17, 0);
	do Memory.poke(memAddress +130, 17, 0);
	do Memory.poke(memAddress +162, 17, 0);
	do Memory.poke(memAddress +194, 17, 0);
	do Memory.poke(memAddress +226, 17, 0);
	do Memory.poke(memAddress +258, 23, 0);
	do Memory.poke(memAddress +290, 20, 0);
	do Memory.poke(memAddress +322, 20, 0);
	do Memory.poke(memAddress +354, 20, 0);
	do Memory.poke(memAddress +386, 23, 0);
	do Memory.poke(memAddress +418, 17, 0);
	do Memory.poke(memAddress +450, 17, 0);
	do Memory.poke(memAddress +482, 17, 0);
	do Memory.poke(memAddress +514, 17, 0);
	do Memory.poke(memAddress +546, 17, 0);
	do Memory.poke(memAddress +578, 15, 0);
	return;
}

    method void moveDown() {
        // verifica si se puede mover hacia abajo sin salir de la pantalla
        if ((y + 5) < 256) {
            do erase();
            // actualiza la posición y
            let y = y + 5;
    
            // dibuja el cuadrito en la nueva posición
            do draw();
        }
        return;
    }
    
    method void moveUp(){
        
        if (y>4){
            do erase();
            let y = y-5;
            
            do draw();            
        }
        return;
    }

}